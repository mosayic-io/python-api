-- Create tables
CREATE TABLE "public"."app_compliance" (
  "id" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  "html" TEXT NOT NULL
);

CREATE TABLE "public"."notifications" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "user_id" TEXT NOT NULL,
  "notification" JSON NOT NULL,
  "is_read" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "public"."users" (
  "id" TEXT NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "email" TEXT,
  "display_name" TEXT,
  "photo_url" TEXT
);

-- Enable row level security
ALTER TABLE "public"."app_compliance" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."notifications" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

-- Create unique indexes
CREATE UNIQUE INDEX app_compliance_pkey ON "public"."app_compliance" USING BTREE ("id");
CREATE UNIQUE INDEX notifications_pkey ON "public"."notifications" USING BTREE ("id");
CREATE UNIQUE INDEX users_pkey ON "public"."users" USING BTREE ("id");

-- Add primary key constraints
ALTER TABLE "public"."app_compliance" ADD CONSTRAINT "app_compliance_pkey" PRIMARY KEY USING INDEX "app_compliance_pkey";
ALTER TABLE "public"."notifications" ADD CONSTRAINT "notifications_pkey" PRIMARY KEY USING INDEX "notifications_pkey";
ALTER TABLE "public"."users" ADD CONSTRAINT "users_pkey" PRIMARY KEY USING INDEX "users_pkey";

-- Add foreign key constraints
ALTER TABLE "public"."notifications" ADD CONSTRAINT "notifications_user_id_fkey"
  FOREIGN KEY ("user_id") REFERENCES "public"."users"("id")
  ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."notifications" VALIDATE CONSTRAINT "notifications_user_id_fkey";

-- Row level security policies
CREATE POLICY "Users can see compliance"
  ON "public"."app_compliance"
  AS PERMISSIVE
  FOR SELECT
  TO PUBLIC
  USING (TRUE);

CREATE POLICY "Users can manage their own notification data"
  ON "public"."notifications"
  AS PERMISSIVE
  FOR ALL
  TO "authenticated"
  USING ((auth.uid()::TEXT) = "user_id")
  WITH CHECK ((auth.uid()::TEXT) = "user_id");

CREATE POLICY "Users can manage their own data"
  ON "public"."users"
  AS PERMISSIVE
  FOR ALL
  TO "authenticated"
  USING ((auth.uid()::TEXT) = "id")
  WITH CHECK ((auth.uid()::TEXT) = "id");
